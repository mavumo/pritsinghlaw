Add these changes to all "<a>" components that include " href=“/client-area/intake-form” " or “ href=“https://pritsinghlaw.com/client-area/intake-form” “ across all .html files in the "services/" directory using the code format below (keep the css selector or class value unchanged in each component): 

<a href="#" id="open-intake-modal" type="button" aria-haspopup="dialog" aria-controls="intake-modal" .... >


 Then add this code to the same set of files before the closing </head> tag: 

  <style>
  :root {
    --navy: #0a2a6b;
    --orange: #ff4900;
    --overlay: rgba(0, 0, 0, 0.65);
    --radius: 16px;
  }

  /* Base reset-ish */
  * { box-sizing: border-box; }
  body.no-scroll { overflow: hidden; }
  img { max-width: 100%; display: block; }

  /* Trigger button demo (style to taste or remove) */
  .trigger-btn {
    padding: 0.85rem 1.2rem;
    border: 1px solid var(--navy);
    background: white;
    color: var(--navy);
    border-radius: 999px;
    font-weight: 600;
    cursor: pointer;
  }

  /* Overlay */
  .modal-overlay {
    position: fixed;
    inset: 0;
    background: var(--overlay);
    display: grid;
    place-items: center;
    padding: 1rem;
    z-index: 9999;

    /* hidden by default */
    opacity: 0;
    pointer-events: none;
    transition: opacity 200ms ease;
  }
  .modal-overlay.open {
    opacity: 1;
    pointer-events: auto;
  }

  /* Dialog */
  .modal-dialog {
    width: 100%;
    max-width: 720px;
    background: #fff;
    border-radius: var(--radius);
    box-shadow: 0 20px 60px rgba(0,0,0,0.25);
    padding: clamp(1rem, 2.5vw, 2rem);
    position: relative;
    transform: translateY(10px) scale(0.98);
    transition: transform 220ms ease, opacity 220ms ease;
    opacity: 0;
  }
  .modal-overlay.open .modal-dialog {
    transform: translateY(0) scale(1);
    opacity: 1;
  }

  /* Close button */
  .modal-close {
    position: absolute;
    top: 10px;
    right: 10px;
    border: none;
    background: transparent;
    font-size: 1.5rem;
    line-height: 1;
    cursor: pointer;
    color: #6b7280; /* slate-500 */
    border-radius: 8px;
    padding: 0.25rem 0.5rem;
  }
  .modal-close:focus-visible { outline: 2px solid var(--navy); outline-offset: 2px; }

  /* Content */
  .logo-wrap {
    display: grid;
    place-items: center;
    margin-top: 0.25rem;
  }
  .modal-logo {
    width: min(220px, 55%);
    height: auto;
  }
  .title {
    text-align: center;
    font-weight: 800;
    font-size: clamp(1.4rem, 2.4vw, 2rem);
    margin: 1rem 0 0.5rem;
    color: #111827; /* gray-900 */
  }
  .subtitle {
    text-align: center;
    color: #4b5563; /* gray-600 */
    font-size: clamp(0.95rem, 1.6vw, 1.05rem);
    line-height: 1.6;
    max-width: 62ch;
    margin: 0 auto 1.25rem;
  }

  .cta-stack {
    display: grid;
    gap: 0.9rem;
    margin: 1.25rem auto 0.25rem;
    max-width: 560px;
  }

  .cta {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    text-decoration: none;
    border-radius: 15px;
    padding: 0.9rem 1.1rem;
    font-weight: 700;
    font-size: 1rem;
    cursor: pointer;
    transition: transform 120ms ease, box-shadow 120ms ease, background-color 160ms ease, color 160ms ease, border-color 160ms ease;
    will-change: transform;
  }
  .cta:focus-visible { outline: 2px solid var(--navy); outline-offset: 2px; }

  /* First button: navy outline */
  .cta-outline {
    background: #fff;
    color: var(--navy);
    border: 2px solid var(--navy);
    box-shadow: 0 1px 0 rgba(0,0,0,0.03);
  }
  .cta-outline:hover { transform: translateY(-1px); box-shadow: 0 6px 18px rgba(10,42,107,0.12); }

  /* Second button: solid orange with animation */
  .cta-solid {
    background: #ff4900;
    color: #fff;
    border: 2px solid var(--orange);
    box-shadow: 0 6px 16px rgba(255,73,0,0.25);
  }
  .cta-solid:hover { transform: translateY(-1px) scale(1.01); box-shadow: 0 10px 26px rgba(255,73,0,0.35); }

  /* Subtext */
  .help-text {
    font-size: 0.85rem;
    color: #6b7280; /* gray-500 */
    text-align: center;
    margin-top: -0.5rem;
  }

  /* Gentle attention animation for the paid CTA */
  @keyframes gentlePulse {
    0% { transform: translateY(0) scale(1); box-shadow: 0 6px 16px rgba(255,73,0,0.25); }
    50% { transform: translateY(-1px) scale(1.015); box-shadow: 0 12px 28px rgba(255,73,0,0.38); }
    100% { transform: translateY(0) scale(1); box-shadow: 0 6px 16px rgba(255,73,0,0.25); }
  }
  .animated-cta {
    animation: gentlePulse 2200ms ease-in-out infinite;
    animation-delay: 1.4s;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .modal-overlay, .modal-dialog, .cta, .animated-cta { transition: none !important; animation: none !important; }
  }
</style>


Then add this code to the end of each .html file before the closing </body> tag: 

 <!---CLIENT INTAKE POPUP CTA--->
  
  <!-- Modal -->
  <div id="intake-overlay" class="modal-overlay" aria-hidden="true">
    <div
      id="intake-modal"
      class="modal-dialog"
      role="dialog"
      aria-modal="true"
      aria-labelledby="intake-title"
      aria-describedby="intake-subtitle"
      tabindex="-1"
    >
      <button class="modal-close" id="close-intake-modal" type="button" aria-label="Close dialog">&times;</button>

      <div class="logo-wrap">
        <img class="modal-logo" src="https://pritsinghlaw.com/colornobg.svg" alt="Law Offices of Pritpal Singh logo" width="250" height="auto" />
      </div>

      <h2 id="intake-title" class="title">Schedule A Consultation</h2>

      <p id="intake-subtitle" class="subtitle">
        Choose one of the consultation options below to schedule a consultation with an attorney in minutes.
        You will receive a confirmation email and/or SMS within an hour after your booking request is received by our legal team.
        Please note that free 15-minute consultations can only be scheduled once per client and all paid consultations will take priority in the unlikely event of a scheduling conflict.
      </p>

      <div class="cta-stack">
        <a
          class="cta cta-outline"
          href="https://pritsinghlaw.com/bookings/free"
          target="_blank"
          rel="noopener noreferrer"
        >15-Minute Consultation - FREE</a>
        <div class="help-text">Consultation will take place via Zoom or telephonically</div>

        <a
          class="cta cta-solid animated-cta"
          href="https://pritsinghlaw.com/bookings/paid"
          target="_blank"
          rel="noopener noreferrer"
        >1-Hour Consultation - $500</a>
        <div class="help-text">Consultation will take place via Zoom or in-person. Document reviews may be included for additional fee</div>
      </div>
    </div>
  </div>

<script>
(function () {
  const openBtn = document.getElementById('open-intake-modal');
  const overlay = document.getElementById('intake-overlay');
  const dialog = document.getElementById('intake-modal');
  const closeBtn = document.getElementById('close-intake-modal');
  let lastFocused = null;

  const focusableSelectors = [
    'a[href]',
    'area[href]',
    'button:not([disabled])',
    'input:not([disabled])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    '[tabindex]:not([tabindex="-1"])'
  ];

  function getFocusable(container) {
    return Array.from(container.querySelectorAll(focusableSelectors.join(',')))
      .filter(el => el.offsetParent !== null || el === document.activeElement);
  }

  function openModal() {
    lastFocused = document.activeElement;
    overlay.classList.add('open');
    overlay.setAttribute('aria-hidden', 'false');
    document.body.classList.add('no-scroll');

    // Focus first focusable element inside dialog
    const focusables = getFocusable(dialog);
    (focusables[0] || dialog).focus();

    // Trap focus
    document.addEventListener('keydown', trapFocus);
    document.addEventListener('keydown', onEsc);
  }

  function closeModal() {
    overlay.classList.remove('open');
    overlay.setAttribute('aria-hidden', 'true');
    document.body.classList.remove('no-scroll');

    document.removeEventListener('keydown', trapFocus);
    document.removeEventListener('keydown', onEsc);

    if (lastFocused && typeof lastFocused.focus === 'function') {
      lastFocused.focus();
    }
  }

  function trapFocus(e) {
    if (e.key !== 'Tab') return;
    const focusables = getFocusable(dialog);
    if (focusables.length === 0) return;

    const first = focusables[0];
    const last = focusables[focusables.length - 1];

    if (e.shiftKey) {
      if (document.activeElement === first) {
        e.preventDefault();
        last.focus();
      }
    } else {
      if (document.activeElement === last) {
        e.preventDefault();
        first.focus();
      }
    }
  }

  function onEsc(e) {
    if (e.key === 'Escape') closeModal();
  }

  // Click outside to close
  overlay.addEventListener('click', (e) => {
    if (e.target === overlay) closeModal();
  });

  openBtn.addEventListener('click', openModal);
  closeBtn.addEventListener('click', closeModal);
})();
</script>